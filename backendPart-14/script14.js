// Authentication - The process of verifying the identity of a user who is attempting to access a system. This typically involves checking credentials such as email, username, and password.

// Authorization - The process of determining whether an authenticated user has the right to perform a specific action or access certain resources within the system.

// When you try to access some information from your account, the server asks you to enter your details, like email and password. After your email and password are confirmed by the server (this is authentication), then it lets you access the info only once. If you wish to see another information about your account, then you need to log in again. To avoid this, sessions and cookies are introduced.

// Sessions: After successful authentication, the server creates a session. This session contains a unique session ID that identifies the user and their authenticated state.
// Cookies: The session ID is stored in a cookie, which is a small piece of data sent by the server and stored on the client's browser.
// So now, whenever you send a request to the server, the cookie containing the session ID gets attached to the request. The server looks at the session ID in the cookie to verify the userâ€™s identity and authenticated state without requiring the user to log in again. This process ensures that the user remains authenticated across multiple requests until the session expires or the user logs out.

// 1. Learn to set and read cookies

    // const cookieParser = require('cookie-parser');
    // const express = require('express');
    // const app = express();

    // app.use(cookieParser())

    // app.get('/', function(req, res) {
    //     res.cookie("Location", "Pune");
    //     res.send("done");
    // })

    // app.get('/read', function(req, res) {
    //     console.log(req.cookies);
    //     res.send("Read Page");
    // })

    // app.listen(3000);

// 2. Learn to use bcrypt for encryption and decryption
    // For encryption
    // const express = require('express');
    // const app = express();
    // const bcrypt = require('bcrypt');

    // app.get('/', function(req, res) {
    //     bcrypt.genSalt(10, function(err, salt) {
    //     bcrypt.hash("password", salt, function(err, hash) {
    //         console.log(hash);
    //     });
    // });
    // })

    // app.listen(3000);


// For decryption
    // You can't decrypt the password, but you can check whether the hash value and the password value are the same or not. Based on that, you'll get a true or false result. The password value given in the field gets converted into a hash using the hash function. Now, you check the already stored hash value against the newly generated hash value. By comparing them, bcrypt tells you whether the password is correct or not.

    // const express = require('express');
    // const app = express();
    // const bcrypt = require('bcrypt');

    // app.get('/', function(req, res) {
    //     bcrypt.compare("password", "$2b$10$rvMm2UF91ankTt9T39qwZu/mtBx8WJe7480af2EpSMP3qW1iwN88G", function(err, result) {
    //         console.log(result);
    // });
    // })

    // app.listen(3000);

// 3. What is jwt? And How to store data in jwt and how to retrieve it

    // To download jwt and bcrypt - npm i jsonwebtoken bcrypt

    // JWT stores the password in 3 section. The first one is algorithm, the second one is hash value of the password, and the third one is signatures. 
    // The second one data value is generally email, because emails are unique, and with their unique hash values, the response can be given to appropriate user. 

//     const express = require('express');
//     const app = express();
//     const jwt = require('jsonwebtoken');
//     const cookieParser = require('cookie-parser');

//     app.use(cookieParser());

//     app.get('/', function(req, res) {
//     let token = jwt.sign({email: "pawan@gmail.com"}, "secret");
//    // Based on the string "secret", it will hash the email. The hashing keys are stored very securely, because with them the decryption of data is also possible. 
//     res.cookie("token", token);
//     res.send("done");
//    // The hashed value of email now will be the session token used in cookies to identify the user. 
//    // for ex: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InBhd2FuQGdtYWlsLmNvbSIsImlhdCI6MTcyMjAwNDg1NH0.wMhWzbZIV258_q3Tb_ougLvW1twiJDYIEJG0bqSO94o
//    // The above string will be used as session id to identify the user   
//     console.log(token);
// })

//     app.get('/read', function(req, res) {
//         // console.log(req.cookies.token);
//         let data = jwt.verify(req.cookies.token, "secret");
//         console.log(data);
//     })

//     app.listen(3000);

// Cookie - A data is generated by the server and stored inside the browser is referred as cookie.
// Ones you add the cookie in website, now regardless of the any routes, the cookie will be still attached. 
// To see the cookies on the console, you need to install npm i cookie-parser.